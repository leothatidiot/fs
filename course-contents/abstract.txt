
part2/a
console.log
Reactjs code snippets 工具
JavaScript Arrays 函数式编程
Map
Anti-pattern

part2/b
useState
filter

part2/c
promise
开发工具 json-server
JavaScript 引擎（运行时环境） 的 异步模型（asynchronous model） ??
基于 promise 的 fetch 函数
npm(Node Package Manager) 和 axios
promise: an object representing the eventual completion or failure of an asynchronous operation
Effect-hook
结构

part2/d
RESTful
axios POST
提取与后端通信的部分
promise chain



part3/a
npm dependency
SemVer
express
nodemon // 更改后自动重新加载
postman
middleware

part3/b
cors 跨域资源共享
heroku
git submoudle
生产构建 build
开发环境的端口、构建后的最终结构
script流程化前端部署 // ?
相对URL、前端的开发模式下代理

part3/c
调试
MongoDB
Schema
JS特性 ...在...操作启动后立即执行 应该用回调函数避免
后端连接到数据库
  修改Schema 的 toJSON 方法
Database into module
  dotenv // 高效使用环境变量
...
Error handling
将错误处理移入中间件 error=>next(error)
中间件顺序

part3/d
使用 ESLint



part4/a
  structure_of_backend
    project structure
    Router 对象
  introduction_to_testing, unit_test
    jest
	  各种类型的 expect
      expect().toBe()  
	  expect().toEqual()

part4/b testing_the_backend
  test-environment
    different NODE_ENV in production / development / test mode
    在 Windows 需要 cross-env
    Test execution in particular typically requires that a single database instance is not used by tests that are running concurrently.
  Initializing database before tests
  run tests 1 by 1
  async / await & change fetching in the backend
  使用了 async/await 语法则需要用 try-catch，可用 express-async-errors 消除之
  JS 的异步本质
    Promise.all()
  Refactoring tests
  学到经验：后端response只能有一个出口，不可能有【respond 204 之后，还有可能 respond 200】这种情况

part4/c user_administration
  document database vs. relational database
  Test-driven development
  增加一个 /api/users 路由，及其测试
  password storing
    bcrypt, salt
  经验： app.js 和 handler(./controllers/users) 内的路由不一样！ https://stackoverflow.com/a/71815540/15855497
  扩展查询结果 User.find({}).populate('notes', { contents: 1, date:1 })
  关系型数据库的交易性（transactional），即像交易一样，数据库的状态在查询期间不会改变
  而 Mongoose 的连接查询中，没有任何东西可以保证被连接的集合（collection）之间的状态是一致的
  这意味着如果做一个连接 Users 和 Notes 集合的查询，集合的状态可能在查询过程中发生变化。

part4/d
  token based authentication
  bcrypt.hash() & bcrypt.compare()
  jwt(JSON Web Tokens)
    jwt.sign() & jwt.verify()
    env SECRET
    HTTP header Authorization
      authentication schemes
  Error handling
    JsonWebTokenError handled in errorHandler middleware
    If the application has multiple interfaces requiring identification, 
    JWT's validation should be separated into its own middleware. (express-jwt)
  Problems of Token-based authentication
    revoked access rights (for safety)
      1. expiration of token validity
        token could expire in perid of time
      2. server side session
        token saved in backend database (revoke access rights at any time)
        increased complexity in the backend
        decreaded performance
          token validity needs to be checked for each API request from database. 
          database access is considerably slower compared to checking the validity 
          from the token itself.
            save the "session corresponding" to a token to a key-value-database
            Redis
    Authorization-header vs. cookies